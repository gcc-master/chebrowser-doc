О фингерпринтах
===============
.. contents:: Содержание
   :depth: 3


Виртуальные машины
------------------
При помощи javascript можно довольно точно определять, запущен браузер в виртуальной машине или на реальном железе.

Мне известны, по крайней мере, две техники детекта виртуалок при помощи js из браузера.
Хотя я склонен полагать, что подобных техник существует куда больше.

На данном этапе я не вижу адекватных методов противодействия подобным техникам детекта.
По этой причине, если Вы хотите добиться максимальной маскировки, то я рекомендую запускать софт на реальном железе, а не в виртуалках.

OS фингерпринтинг
-----------------
Хотелось бы обозначить, то что при помощи javascript можно определять на какой OS запущен браузер.
Зачастую это делается по анализу реализации низкоуровневого функционала OS/системных библиотек, которым пользуется браузер.

На пример это могут быть особенности вычисления чисел с плавающей запятой.

На данном этапе я не вижу адекватных методов противодействия подобным техникам детекта.
По этой причине, если Вы хотите добиться максимальной маскировки, то я рекомендую запускать софт на той же ОС профиль которой Вы используете в антидетекте.


Идеальный антидетект
--------------------
При качественном браузерном фингерпринтинге зачастую анализируется низкоуровневый, платформозависимый, железозависимый функционал OS, системных библиотек, драйверов и тп.

По этой причине реализовать антидетект, который работал бы одинаково хорошо на всех сайтах, технически не представляется возможным.

Приведу простой пример с canvas фингерпринтом.
Суть метода проста - отрисовка текста и геометрических фигур на canvas таким образом, что бы задействовать низкоуровневый системный функционал.
Примером такого функционала может быть рендеринг шрифтов при отрисовки текста на canvas.
Рендеринг шрифтов очень сильно зависит от OS, драйверов видео карты и системных библиотек.

Две картинки отрисованные на разных компьютерах (с разным железом) при помощи одного и того же javascript кода будут отличаться.
Визуально они будут выглядеть практически одинаково, но если сравнивать их попиксельно, то различия будут очевидны.

Из данного примера становится понятно, что невозможно эмулировать рендеринг шрифтов на машине с видео картой одного вендора так же как на машине с видео картой другого вендора.

Собранные данные при помощи canvas фингерпринта отправляются на backend. Где в свою очередь проходят статистический анализ.

Этот анализ позволяет легко выявлять фэйковые сэмплы-образцы, такие как:

- cэмплы-образцы с наложением шума (слишком уникальные образцы)
- cэмплы-образцы сгенерированные не на той OS/видеокарте, что заявлена

Плюс следует учитывать, что реализация canvas фингерпринта может отличаться от сайта к сайту.
К примеру на сайте paypal.com на canvas накладывается текст: **PayPal.com, <!@#$%>**

Хотя так же следует сказать, что тысячи сайтов используют хорошо зарекомендовавшие себя публичные библиотеки для браузерного фингерпринтинга.

Исходя из выше сказанного было принято решение развивать софт по пути кастомизаций.
Т.е. собирать сэмплы-образцы данных с реальных браузеров тем же кодом, что и сайты.
И в момент посещения целевого сайта выдавать ранее собранные данные.
По сути получается, что сайты получают реальные данные, а не синтетически сгенерированные.



.. include:: yandex-metrika.rst
